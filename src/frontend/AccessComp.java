/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frontend;

import backend.*;
import java.util.ArrayList;

/**
 *
 * @author bdb5356
 */
public class AccessComp extends javax.swing.JPanel {

    private Mockup myGUI;
    private DB_Manager db = new DB_Manager();
    private ArrayList<? extends Item> itemList;

    /**
     * Creates new form DeleteComp1
     */
    public AccessComp() {
        initComponents();
    }

    public AccessComp(Mockup m) {
        myGUI = m;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        CancelBtn = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        ComponentList = new javax.swing.JList<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        ramType = new javax.swing.JLabel();
        power = new javax.swing.JLabel();
        socket = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setText("Access");

        CancelBtn.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        CancelBtn.setText("Cancel");
        CancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelBtnActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CPU", "MOBO", "RAM", "GPU", "PSU", "Case" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        ComponentList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ComponentListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(ComponentList);

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel5.setText("Stock:");

        jLabel10.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel10.setText("Price:");

        jLabel11.setText("Sku: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(200, 200, 200)
                .addComponent(CancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(119, 119, 119)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel10))
                        .addGap(5, 5, 5)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(power))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ramType))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(socket)))
                .addGap(132, 132, 132))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(140, 140, 140))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(ramType)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                        .addComponent(CancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(power)
                        .addGap(29, 29, 29)
                        .addComponent(socket)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
    }// </editor-fold>//GEN-END:initComponents


    private void CancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelBtnActionPerformed
        // TODO add your handling code here:
        myGUI.changePanel("accessitem", "manager");
        itemList = db.queryCPU();
        String[] cpuArray = new String[itemList.size()];
        for (int i = 0; i < cpuArray.length; i++) {
            cpuArray[i] = itemList.get(i).getName();
        }

    }//GEN-LAST:event_CancelBtnActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        switch (jComboBox1.getSelectedIndex()) {
            case 0: // displays CPU

                // add names from cpuList to cpuArray for the JList
                itemList = db.queryCPU();

                // add names from cpuList to cpuArray for the JList
                String[] cpuArray = new String[itemList.size()];
                for (int i = 0; i < cpuArray.length; i++) {
                    cpuArray[i] = itemList.get(i).getName();
                }

                // wipe and populate JList
                ComponentList.clearSelection();
                ComponentList.setListData(cpuArray);

                break;

            case 1: // displays MOBO

                // query database
                itemList = db.queryMOBO();

                // add names from moboList to moboArray for the JList
                String[] moboArray = new String[itemList.size()];
                for (int i = 0; i < moboArray.length; i++) {
                    moboArray[i] = itemList.get(i).getName();
                }

                // wipes and updates JList
                ComponentList.clearSelection();
                ComponentList.setListData(moboArray);

                break;

            case 2: // displays RAM

                // query database
                itemList = db.queryRAM();

                // add names from ramList to ramArray for the JList
                String[] ramArray = new String[itemList.size()];
                for (int i = 0; i < ramArray.length; i++) {
                    ramArray[i] = itemList.get(i).getName();
                }

                // wipes and updates JList
                ComponentList.clearSelection();
                ComponentList.setListData(ramArray);

                break;

            case 3: // displays GPU

                // query database
                itemList = db.queryGPU();

                // add names from gpuList to gpuArray for the JList
                String[] gpuArray = new String[itemList.size()];
                for (int i = 0; i < gpuArray.length; i++) {
                    gpuArray[i] = itemList.get(i).getName();
                }

                // wipes and updates JList
                ComponentList.clearSelection();
                ComponentList.setListData(gpuArray);

                break;

            case 4: // displays PSU

                // query the database
                itemList = db.queryPSU();

                // add names from psuList to psuArray for the JList
                String[] psuArray = new String[itemList.size()];
                for (int i = 0; i < psuArray.length; i++) {
                    psuArray[i] = itemList.get(i).getName();
                }

                // wipes and updates JList
                ComponentList.clearSelection();
                ComponentList.setListData(psuArray);

                break;

            case 5: // displays Case

                // query the database
                itemList = db.queryCase();

                // add names from caseList to csaeArray for the JList
                String[] caseArray = new String[itemList.size()];
                for (int i = 0; i < caseArray.length; i++) {
                    caseArray[i] = itemList.get(i).getName();
                }

                // wipes and updates JList
                ComponentList.clearSelection();
                ComponentList.setListData(caseArray);

                break;
        } // end of switch

    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void ComponentListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ComponentListMouseClicked
//cpu
        switch (jComboBox1.getSelectedIndex()) {
            case 0:
                for (Item item : (ArrayList<Item>) itemList) {
                    // iterates through array to return the item which was selected
                    if (item.getName().equalsIgnoreCase(ComponentList.getSelectedValue())) {
                        jLabel3.setText("$" + Double.toString(item.getPrice()));
                        jLabel2.setText(Integer.toString(item.getStock()));
                        jLabel11.setText("Sku: " + Integer.toString(item.getSku()));
                        socket.setText("Socket: " + ((CPU) item).getSocket());
                        power.setText("Watts: " + ((CPU) item).getPower());
                        ramType.setText("");
                        ComponentList.clearSelection();

                        break;
                    }
                }
            //MOBO
            case 1:
                for (Item item : (ArrayList<Item>) itemList) {
                    // iterates through array to return the item which was selected
                    if (item.getName().equalsIgnoreCase(ComponentList.getSelectedValue())) {
                        jLabel3.setText("$" + Double.toString(item.getPrice()));
                        jLabel2.setText(Integer.toString(item.getStock()));
                        jLabel11.setText("Sku: " + Integer.toString(item.getSku()));
                        socket.setText("Socket: " + ((MOBO) item).getSocket());
                        ramType.setText("Ram Type: " + ((MOBO) item).getRamType());
                        power.setText("");
                        ComponentList.clearSelection();
                        break;
                    }
                }
            //RAM
            case 2:
                for (Item item : (ArrayList<Item>) itemList) {
                    // iterates through array to return the item which was selected
                    if (item.getName().equalsIgnoreCase(ComponentList.getSelectedValue())) {

                        jLabel3.setText("$" + Double.toString(item.getPrice()));
                        jLabel2.setText(Integer.toString(item.getStock()));
                        jLabel11.setText("Sku: " + Integer.toString(item.getSku()));
                        ramType.setText("Ram Type: " + ((RAM) item).getRamType());
                        socket.setText("");
                        power.setText("");
                        ComponentList.clearSelection();

                        break;
                    }

                }

            case 3:

                //GPU
                for (Item item : (ArrayList<Item>) itemList) {
                    // iterates through array to return the item which was selected
                    if (item.getName().equalsIgnoreCase(ComponentList.getSelectedValue())) {

                        jLabel3.setText("$" + Double.toString(item.getPrice()));
                        jLabel2.setText(Integer.toString(item.getStock()));
                        jLabel11.setText("Sku: " + Integer.toString(item.getSku()));
                        ramType.setText("");
                        socket.setText("");
                        power.setText("Watts: " + ((GPU) item).getPower());
                        ComponentList.clearSelection();
                        break;
                    }
                }
            //PSU  
            case 4:
                for (Item item : (ArrayList<Item>) itemList) {
                    // iterates through array to return the item which was selected
                    if (item.getName().equalsIgnoreCase(ComponentList.getSelectedValue())) {

                        jLabel3.setText("$" + Double.toString(item.getPrice()));
                        jLabel2.setText(Integer.toString(item.getStock()));
                        jLabel11.setText("Sku: " + Integer.toString(item.getSku()));
                        power.setText("Watts: " + ((PSU) item).getPower());
                        if (((PSU) item).getModular() > 0) {
                            socket.setText("Modular : Yes");
                        } else {
                            socket.setText("Modular : No");
                        }
                        ramType.setText("");
                        ComponentList.clearSelection();
                        break;
                    }
                }
            //Case
            case 5:
                for (Item item : (ArrayList<Item>) itemList) {
                    // iterates through array to return the item which was selected
                    if (item.getName().equalsIgnoreCase(ComponentList.getSelectedValue())) {

                        jLabel3.setText("$" + Double.toString(item.getPrice()));
                        jLabel2.setText(Integer.toString(item.getStock()));
                        jLabel11.setText("Sku: " + Integer.toString(item.getSku()));
                        ramType.setText("");
                        socket.setText("");
                        power.setText("");
                        ComponentList.clearSelection();
                        break;
                    }
                }

        }

    }//GEN-LAST:event_ComponentListMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CancelBtn;
    private javax.swing.JList<String> ComponentList;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel power;
    private javax.swing.JLabel ramType;
    private javax.swing.JLabel socket;
    // End of variables declaration//GEN-END:variables
}
